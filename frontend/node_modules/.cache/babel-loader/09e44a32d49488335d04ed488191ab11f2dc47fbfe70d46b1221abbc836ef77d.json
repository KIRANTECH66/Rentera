{"ast":null,"code":"// This is a placeholder hook to simulate a real i18n library like react-i18next.\n// It is NOT a production-ready solution.\nimport en from '../i18n/en.json';\nimport es from '../i18n/es.json';\nconst translations = {\n  en,\n  es\n};\n\n// For this simulation, we'll just use English as the default.\nconst lang = 'en';\nconst currentTranslations = translations[lang];\nconst useTranslation = () => {\n  /**\n   * A simple translation function placeholder.\n   * It navigates a dot-notation key and replaces placeholders.\n   * e.g., t('register.successMessage', { email: 'test@test.com' })\n   */\n  const t = (key, options) => {\n    let text = key.split('.').reduce((obj, i) => obj && obj[i], currentTranslations);\n    if (!text) {\n      return key; // Return the key if no translation is found\n    }\n    if (options) {\n      Object.keys(options).forEach(k => {\n        text = text.replace(`{{${k}}}`, options[k]);\n      });\n    }\n    return text;\n  };\n  return {\n    t\n  };\n};\nexport default useTranslation;","map":{"version":3,"names":["en","es","translations","lang","currentTranslations","useTranslation","t","key","options","text","split","reduce","obj","i","Object","keys","forEach","k","replace"],"sources":["/home/user/Rentera/frontend/src/hooks/useTranslation.js"],"sourcesContent":["// This is a placeholder hook to simulate a real i18n library like react-i18next.\n// It is NOT a production-ready solution.\nimport en from '../i18n/en.json';\nimport es from '../i18n/es.json';\n\nconst translations = {\n  en,\n  es,\n};\n\n// For this simulation, we'll just use English as the default.\nconst lang = 'en';\nconst currentTranslations = translations[lang];\n\nconst useTranslation = () => {\n  /**\n   * A simple translation function placeholder.\n   * It navigates a dot-notation key and replaces placeholders.\n   * e.g., t('register.successMessage', { email: 'test@test.com' })\n   */\n  const t = (key, options) => {\n    let text = key.split('.').reduce((obj, i) => obj && obj[i], currentTranslations);\n\n    if (!text) {\n      return key; // Return the key if no translation is found\n    }\n\n    if (options) {\n      Object.keys(options).forEach((k) => {\n        text = text.replace(`{{${k}}}`, options[k]);\n      });\n    }\n\n    return text;\n  };\n\n  return { t };\n};\n\nexport default useTranslation;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,EAAE,MAAM,iBAAiB;AAChC,OAAOC,EAAE,MAAM,iBAAiB;AAEhC,MAAMC,YAAY,GAAG;EACnBF,EAAE;EACFC;AACF,CAAC;;AAED;AACA,MAAME,IAAI,GAAG,IAAI;AACjB,MAAMC,mBAAmB,GAAGF,YAAY,CAACC,IAAI,CAAC;AAE9C,MAAME,cAAc,GAAGA,CAAA,KAAM;EAC3B;AACF;AACA;AACA;AACA;EACE,MAAMC,CAAC,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;IAC1B,IAAIC,IAAI,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,IAAIA,GAAG,CAACC,CAAC,CAAC,EAAET,mBAAmB,CAAC;IAEhF,IAAI,CAACK,IAAI,EAAE;MACT,OAAOF,GAAG,CAAC,CAAC;IACd;IAEA,IAAIC,OAAO,EAAE;MACXM,MAAM,CAACC,IAAI,CAACP,OAAO,CAAC,CAACQ,OAAO,CAAEC,CAAC,IAAK;QAClCR,IAAI,GAAGA,IAAI,CAACS,OAAO,CAAC,KAAKD,CAAC,IAAI,EAAET,OAAO,CAACS,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC;IACJ;IAEA,OAAOR,IAAI;EACb,CAAC;EAED,OAAO;IAAEH;EAAE,CAAC;AACd,CAAC;AAED,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}